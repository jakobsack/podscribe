//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "sections")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub part_id: i32,
    #[sea_orm(column_type = "Text")]
    pub text: String,
    #[sea_orm(column_type = "Double")]
    pub starts_at: f64,
    #[sea_orm(column_type = "Double")]
    pub ends_at: f64,
    #[sea_orm(column_type = "Double")]
    pub words_per_second: f64,
    pub corrected: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::approvals::Entity")]
    Approvals,
    #[sea_orm(
        belongs_to = "super::parts::Entity",
        from = "Column::PartId",
        to = "super::parts::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Parts,
    #[sea_orm(has_many = "super::words::Entity")]
    Words,
}

impl Related<super::approvals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Approvals.def()
    }
}

impl Related<super::parts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Parts.def()
    }
}

impl Related<super::words::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Words.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::approvals::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::approvals::Relation::Sections.def().rev())
    }
}
